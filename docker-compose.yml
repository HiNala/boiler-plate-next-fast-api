services:
  # PostgreSQL Database
  db:
    image: postgres:17.5-alpine
    container_name: boilerplate-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: ./infra/docker/api.Dockerfile
    container_name: boilerplate-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://app:app@db:5432/app
      - FRONTEND_ORIGIN=http://localhost:3000
      - ALLOWED_HOSTS=localhost,127.0.0.1,api
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api:/app
      - /app/.venv
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Next.js Frontend
  web:
    build:
      context: .
      dockerfile: ./infra/docker/web.Dockerfile
    container_name: boilerplate-web
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge 
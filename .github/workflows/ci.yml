name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  API_URL: http://localhost:8000
  WEB_URL: http://localhost:3000

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17.5-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U app -d app"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.17.0'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.2'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry pytest requests python-dateutil
        cd apps/api
        poetry install

    - name: Install Node.js dependencies
      run: |
        # Install root dependencies
        npm ci
        
        # Install web app dependencies
        cd apps/web
        npm ci
        
        # Install web test dependencies
        cd ../../tests/web
        npm ci || echo "Web test dependencies will be installed during test run"

    - name: Run platform compatibility check
      run: |
        npm run test:platform

    - name: Build applications
      run: |
        docker compose build

    - name: Start services
      run: |
        docker compose up -d
        echo "Waiting for services to start..."
        sleep 30
        
        # Check service status
        docker compose ps
        docker compose logs --tail=10 api
        docker compose logs --tail=10 web

    - name: Wait for services to be healthy
      run: |
        # Wait for API to respond
        for i in {1..30}; do
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "API is responding"
            break
          fi
          echo "Waiting for API... ($i/30)"
          sleep 2
        done
        
        # Wait for Web to respond
        for i in {1..30}; do
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "Web is responding"
            break
          fi
          echo "Waiting for Web... ($i/30)"
          sleep 2
        done

    - name: Run health checks
      run: |
        node tests/ci-health-check.js

    - name: Run integration tests
      run: |
        npm run test:integration

    - name: Run API tests
      run: |
        # Run API tests from root directory where tests/api/ is located
        python -m pytest tests/api/ -v --tb=short

    - name: Run web tests
      run: |
        cd tests/web
        npm ci
        npm test

    - name: Run linting
      run: |
        # Lint web application
        cd apps/web
        npm run lint
        cd ../../
        
        # Install ruff for Python linting
        pip install ruff
        
        # Lint API application
        cd apps/api
        ruff check . || echo "Ruff linting completed with warnings"

    - name: Stop services
      if: always()
      run: |
        docker compose down --volumes

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker compose build
        
    - name: Tag images
      run: |
        # Get the image names from docker compose
        docker images | grep cre8able
        
        # Tag images if they exist
        if docker images | grep -q "cre8able-api"; then
          docker tag cre8able-api:latest ${{ github.repository }}-api:${{ github.sha }}
        fi
        
        if docker images | grep -q "cre8able-web"; then
          docker tag cre8able-web:latest ${{ github.repository }}-web:${{ github.sha }}
        fi

    # Uncomment and configure for your registry
    # - name: Login to Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Push to Container Registry
    #   run: |
    #     docker push ghcr.io/${{ github.repository }}-api:${{ github.sha }}
    #     docker push ghcr.io/${{ github.repository }}-web:${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'  # Don't fail the build on vulnerabilities

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Placeholder for deployment jobs
  # deploy-api:
  #   needs: [build-api]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to Render
  #       run: echo "Deploy API to Render"
  #
  # deploy-web:
  #   needs: [lint-web]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to Vercel
  #       run: echo "Deploy Web to Vercel" 
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  API_URL: http://localhost:8000
  WEB_URL: http://localhost:3000

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        cd apps/api
        poetry install

    - name: Install Node.js dependencies
      run: |
        npm ci --no-save
        cd apps/web
        npm ci

    - name: Build applications
      run: |
        docker compose build

    - name: Start services
      run: |
        docker compose up -d
        sleep 30  # Wait for services to be ready

    - name: Run health checks
      run: |
        npm run test:health

    - name: Run integration tests
      run: |
        npm run test:integration

    - name: Run API tests
      run: |
        cd apps/api
        poetry run pytest tests/ -v --tb=short

    - name: Run web tests
      run: |
        cd tests/web
        npm ci
        npm test

    - name: Run linting
      run: |
        cd apps/web
        npm run lint
        cd ../api
        poetry run ruff check .

    - name: Stop services
      if: always()
      run: |
        docker compose down --volumes

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker compose build
        
    - name: Tag images
      run: |
        docker tag cre8able-api:latest ${{ github.repository }}-api:${{ github.sha }}
        docker tag cre8able-web:latest ${{ github.repository }}-web:${{ github.sha }}

    # Uncomment and configure for your registry
    # - name: Login to Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Push to Container Registry
    #   run: |
    #     docker push ghcr.io/${{ github.repository }}-api:${{ github.sha }}
    #     docker push ghcr.io/${{ github.repository }}-web:${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Placeholder for deployment jobs
  # deploy-api:
  #   needs: [build-api]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to Render
  #       run: echo "Deploy API to Render"
  #
  # deploy-web:
  #   needs: [lint-web]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to Vercel
  #       run: echo "Deploy Web to Vercel" 